/*
 * Visier Authentication APIs
 * Visier APIs for generating authentication tokens
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AuthenticationRequest;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TokenRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call aSIDTokenAuthenticationCall(AuthenticationRequest authenticationRequest, String username, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/v1/admin/visierSecureToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call aSIDTokenAuthenticationValidateBeforeCall(AuthenticationRequest authenticationRequest, String username, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationRequest' is set
        if (authenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRequest' when calling aSIDTokenAuthentication(Async)");
        }

        return aSIDTokenAuthenticationCall(authenticationRequest, username, password, _callback);

    }


    private ApiResponse<String> aSIDTokenAuthenticationWithHttpInfo(AuthenticationRequest authenticationRequest, String username, String password) throws ApiException {
        okhttp3.Call localVarCall = aSIDTokenAuthenticationValidateBeforeCall(authenticationRequest, username, password, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call aSIDTokenAuthenticationAsync(AuthenticationRequest authenticationRequest, String username, String password, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = aSIDTokenAuthenticationValidateBeforeCall(authenticationRequest, username, password, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ASIDTokenAuthenticationRequestBuilder {
        private String username;
        private String password;

        private ASIDTokenAuthenticationRequestBuilder() {
        }

        /**
         * Set username
         * @param username  (optional)
         * @return ASIDTokenAuthenticationRequestBuilder
         */
        public ASIDTokenAuthenticationRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set password
         * @param password  (optional)
         * @return ASIDTokenAuthenticationRequestBuilder
         */
        public ASIDTokenAuthenticationRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Build call for aSIDTokenAuthentication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Authentication token response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthenticationRequest authenticationRequest = buildBodyParams();
            return aSIDTokenAuthenticationCall(authenticationRequest, username, password, _callback);
        }

        private AuthenticationRequest buildBodyParams() {
            AuthenticationRequest authenticationRequest = new AuthenticationRequest();
            authenticationRequest.username(this.username);
            authenticationRequest.password(this.password);
            return authenticationRequest;
        }

        /**
         * Execute aSIDTokenAuthentication request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Authentication token response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public String execute() throws ApiException {
            AuthenticationRequest authenticationRequest = buildBodyParams();
            ApiResponse<String> localVarResp = aSIDTokenAuthenticationWithHttpInfo(authenticationRequest, username, password);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute aSIDTokenAuthentication request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Authentication token response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            AuthenticationRequest authenticationRequest = buildBodyParams();
            return aSIDTokenAuthenticationWithHttpInfo(authenticationRequest, username, password);
        }

        /**
         * Execute aSIDTokenAuthentication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Authentication token response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            AuthenticationRequest authenticationRequest = buildBodyParams();
            return aSIDTokenAuthenticationAsync(authenticationRequest, username, password, _callback);
        }
    }

    /**
     * 
     * Generate a Visier authentication token
     * @param authenticationRequest Authentication token request body (required)
     * @return ASIDTokenAuthenticationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication token response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ASIDTokenAuthenticationRequestBuilder aSIDTokenAuthentication() throws IllegalArgumentException {
        return new ASIDTokenAuthenticationRequestBuilder();
    }
    private okhttp3.Call oAuth2AuthorizeCall(String responseType, String clientId, String redirectUri, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/auth/oauth2/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (responseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_type", responseType));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oAuth2AuthorizeValidateBeforeCall(String responseType, String clientId, String redirectUri, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling oAuth2Authorize(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling oAuth2Authorize(Async)");
        }

        return oAuth2AuthorizeCall(responseType, clientId, redirectUri, scope, _callback);

    }


    private ApiResponse<Status> oAuth2AuthorizeWithHttpInfo(String responseType, String clientId, String redirectUri, String scope) throws ApiException {
        okhttp3.Call localVarCall = oAuth2AuthorizeValidateBeforeCall(responseType, clientId, redirectUri, scope, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call oAuth2AuthorizeAsync(String responseType, String clientId, String redirectUri, String scope, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = oAuth2AuthorizeValidateBeforeCall(responseType, clientId, redirectUri, scope, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OAuth2AuthorizeRequestBuilder {
        private final String responseType;
        private final String clientId;
        private String redirectUri;
        private String scope;

        private OAuth2AuthorizeRequestBuilder(String responseType, String clientId) {
            this.responseType = responseType;
            this.clientId = clientId;
        }

        /**
         * Set redirectUri
         * @param redirectUri The optional URI to redirect to after authorization. (optional)
         * @return OAuth2AuthorizeRequestBuilder
         */
        public OAuth2AuthorizeRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set scope
         * @param scope The OAuth 2.0 scope of the authorization request. Defaults to &#x60;read&#x60;. (optional)
         * @return OAuth2AuthorizeRequestBuilder
         */
        public OAuth2AuthorizeRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for oAuth2Authorize
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 3XX </td><td> Redirect to authorization page. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return oAuth2AuthorizeCall(responseType, clientId, redirectUri, scope, _callback);
        }


        /**
         * Execute oAuth2Authorize request
         * @return Status
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 3XX </td><td> Redirect to authorization page. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public Status execute() throws ApiException {
            ApiResponse<Status> localVarResp = oAuth2AuthorizeWithHttpInfo(responseType, clientId, redirectUri, scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute oAuth2Authorize request with HTTP info returned
         * @return ApiResponse&lt;Status&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 3XX </td><td> Redirect to authorization page. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Status> executeWithHttpInfo() throws ApiException {
            return oAuth2AuthorizeWithHttpInfo(responseType, clientId, redirectUri, scope);
        }

        /**
         * Execute oAuth2Authorize request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 3XX </td><td> Redirect to authorization page. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Status> _callback) throws ApiException {
            return oAuth2AuthorizeAsync(responseType, clientId, redirectUri, scope, _callback);
        }
    }

    /**
     * 
     * Initiate an OAuth2 authorization code flow.
     * @param responseType The response type. Must be &#x60;code&#x60;. (required)
     * @param clientId The ID of the pre-registered client application. (required)
     * @return OAuth2AuthorizeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 3XX </td><td> Redirect to authorization page. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2AuthorizeRequestBuilder oAuth2Authorize(String responseType, String clientId) throws IllegalArgumentException {
        if (responseType == null) throw new IllegalArgumentException("\"responseType\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new OAuth2AuthorizeRequestBuilder(responseType, clientId);
    }
    private okhttp3.Call oAuth2TokenCall(TokenRequestBody tokenRequestBody, String grantType, String clientId, String redirectUri, String code, String username, String password, String asidToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenRequestBody;

        // create path and map variables
        String localVarPath = "/v1/auth/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (asidToken != null) {
            localVarFormParams.put("asid_token", asidToken);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/jwt"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oAuth2TokenValidateBeforeCall(TokenRequestBody tokenRequestBody, String grantType, String clientId, String redirectUri, String code, String username, String password, String asidToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenRequestBody' is set
        if (tokenRequestBody == null) {
            throw new ApiException("Missing the required parameter 'tokenRequestBody' when calling oAuth2Token(Async)");
        }

        return oAuth2TokenCall(tokenRequestBody, grantType, clientId, redirectUri, code, username, password, asidToken, _callback);

    }


    private ApiResponse<String> oAuth2TokenWithHttpInfo(TokenRequestBody tokenRequestBody, String grantType, String clientId, String redirectUri, String code, String username, String password, String asidToken) throws ApiException {
        okhttp3.Call localVarCall = oAuth2TokenValidateBeforeCall(tokenRequestBody, grantType, clientId, redirectUri, code, username, password, asidToken, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call oAuth2TokenAsync(TokenRequestBody tokenRequestBody, String grantType, String clientId, String redirectUri, String code, String username, String password, String asidToken, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = oAuth2TokenValidateBeforeCall(tokenRequestBody, grantType, clientId, redirectUri, code, username, password, asidToken, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OAuth2TokenRequestBuilder {
        private String grantType;
        private String clientId;
        private String redirectUri;
        private String code;
        private String username;
        private String password;
        private String asidToken;

        private OAuth2TokenRequestBuilder() {
        }

        /**
         * Set grantType
         * @param grantType The grant type. Supported values: - &#x60;authorization_code&#x60;: The authorization code grant type. - &#x60;password&#x60;: The password grant type. - &#x60;urn:visier:params:oauth:grant-type:asid-token&#x60;: The ASID token grant type. (optional)
         * @return OAuth2TokenRequestBuilder
         */
        public OAuth2TokenRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Set clientId
         * @param clientId The ID of the pre-registered client application. (optional)
         * @return OAuth2TokenRequestBuilder
         */
        public OAuth2TokenRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The optional URI to redirect to after authorization. (optional)
         * @return OAuth2TokenRequestBuilder
         */
        public OAuth2TokenRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set code
         * @param code The authorization code. Applicable only for authorization code grant type. (optional)
         * @return OAuth2TokenRequestBuilder
         */
        public OAuth2TokenRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set username
         * @param username The username of the user to authenticate. Applicable only for password grant type. (optional)
         * @return OAuth2TokenRequestBuilder
         */
        public OAuth2TokenRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set password
         * @param password The password of the user to authenticate. Applicable only for password grant type. (optional)
         * @return OAuth2TokenRequestBuilder
         */
        public OAuth2TokenRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set asidToken
         * @param asidToken The ASID token. Applicable only for ASID token grant type. (optional)
         * @return OAuth2TokenRequestBuilder
         */
        public OAuth2TokenRequestBuilder asidToken(String asidToken) {
            this.asidToken = asidToken;
            return this;
        }
        
        /**
         * Build call for oAuth2Token
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> JWT response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TokenRequestBody tokenRequestBody = buildBodyParams();
            return oAuth2TokenCall(tokenRequestBody, grantType, clientId, redirectUri, code, username, password, asidToken, _callback);
        }

        private TokenRequestBody buildBodyParams() {
            TokenRequestBody tokenRequestBody = new TokenRequestBody();
            tokenRequestBody.grantType(this.grantType);
            tokenRequestBody.clientId(this.clientId);
            tokenRequestBody.redirectUri(this.redirectUri);
            tokenRequestBody.code(this.code);
            tokenRequestBody.username(this.username);
            tokenRequestBody.password(this.password);
            tokenRequestBody.asidToken(this.asidToken);
            return tokenRequestBody;
        }

        /**
         * Execute oAuth2Token request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> JWT response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            TokenRequestBody tokenRequestBody = buildBodyParams();
            ApiResponse<String> localVarResp = oAuth2TokenWithHttpInfo(tokenRequestBody, grantType, clientId, redirectUri, code, username, password, asidToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute oAuth2Token request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> JWT response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            TokenRequestBody tokenRequestBody = buildBodyParams();
            return oAuth2TokenWithHttpInfo(tokenRequestBody, grantType, clientId, redirectUri, code, username, password, asidToken);
        }

        /**
         * Execute oAuth2Token request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> JWT response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            TokenRequestBody tokenRequestBody = buildBodyParams();
            return oAuth2TokenAsync(tokenRequestBody, grantType, clientId, redirectUri, code, username, password, asidToken, _callback);
        }
    }

    /**
     * 
     * Generate a JSON Web Token (JWT) for the specified user.
     * @param tokenRequestBody  (required)
     * @return OAuth2TokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JWT response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2TokenRequestBuilder oAuth2Token() throws IllegalArgumentException {
        return new OAuth2TokenRequestBuilder();
    }
    private okhttp3.Call ticketAuthenticationCall(AuthenticationRequest authenticationRequest, String username, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/v1/admin/visierSecureTicket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ticketAuthenticationValidateBeforeCall(AuthenticationRequest authenticationRequest, String username, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationRequest' is set
        if (authenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRequest' when calling ticketAuthentication(Async)");
        }

        return ticketAuthenticationCall(authenticationRequest, username, password, _callback);

    }


    private ApiResponse<String> ticketAuthenticationWithHttpInfo(AuthenticationRequest authenticationRequest, String username, String password) throws ApiException {
        okhttp3.Call localVarCall = ticketAuthenticationValidateBeforeCall(authenticationRequest, username, password, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call ticketAuthenticationAsync(AuthenticationRequest authenticationRequest, String username, String password, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = ticketAuthenticationValidateBeforeCall(authenticationRequest, username, password, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TicketAuthenticationRequestBuilder {
        private String username;
        private String password;

        private TicketAuthenticationRequestBuilder() {
        }

        /**
         * Set username
         * @param username  (optional)
         * @return TicketAuthenticationRequestBuilder
         */
        public TicketAuthenticationRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set password
         * @param password  (optional)
         * @return TicketAuthenticationRequestBuilder
         */
        public TicketAuthenticationRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Build call for ticketAuthentication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secure ticket response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthenticationRequest authenticationRequest = buildBodyParams();
            return ticketAuthenticationCall(authenticationRequest, username, password, _callback);
        }

        private AuthenticationRequest buildBodyParams() {
            AuthenticationRequest authenticationRequest = new AuthenticationRequest();
            authenticationRequest.username(this.username);
            authenticationRequest.password(this.password);
            return authenticationRequest;
        }

        /**
         * Execute ticketAuthentication request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secure ticket response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public String execute() throws ApiException {
            AuthenticationRequest authenticationRequest = buildBodyParams();
            ApiResponse<String> localVarResp = ticketAuthenticationWithHttpInfo(authenticationRequest, username, password);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute ticketAuthentication request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secure ticket response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            AuthenticationRequest authenticationRequest = buildBodyParams();
            return ticketAuthenticationWithHttpInfo(authenticationRequest, username, password);
        }

        /**
         * Execute ticketAuthentication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secure ticket response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            AuthenticationRequest authenticationRequest = buildBodyParams();
            return ticketAuthenticationAsync(authenticationRequest, username, password, _callback);
        }
    }

    /**
     * 
     * Generate a legacy Visier secure ticket
     * @param authenticationRequest Secure ticket request body (required)
     * @return TicketAuthenticationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Secure ticket response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TicketAuthenticationRequestBuilder ticketAuthentication() throws IllegalArgumentException {
        return new TicketAuthenticationRequestBuilder();
    }
}
